*Alwaysblock1*
-----------------------------------------------------
module top_module(
    input a, 
    input b,
    output wire out_assign,
    output reg out_alwaysblock
);

    assign out_assign = a & b;
    
    always @(*)
        begin
            out_alwaysblock = a & b;
        end
    
endmodule

-----------------------------------------------------

*Alwaysblock2*
-----------------------------------------------------
module top_module(
    input clk,
    input a,
    input b,
    output wire out_assign,
    output reg out_always_comb,
    output reg out_always_ff   );
    
    assign out_assign = a ^ b;
    
    always @(*)
        begin
            out_always_comb = a ^ b;
        end
    
    always @(posedge clk)
        begin
            out_always_ff <= a ^ b;
        end

endmodule

-----------------------------------------------------

*Always if*
-----------------------------------------------------
module top_module(
    input a,
    input b,
    input sel_b1,
    input sel_b2,
    output wire out_assign,
    output reg out_always   ); 
    
    
    assign out_assign = ({sel_b1,sel_b2} == 2'b11)? b: a;
    
    always @(*)
        begin
            if ({sel_b1,sel_b2} == 2'b11)
                begin
                	out_always = b;
                end
        	else 
                begin
                    out_always = a;
                end
        end
    
endmodule

-----------------------------------------------------

*Always if2*
-----------------------------------------------------
module top_module (
    input      cpu_overheated,
    output reg shut_off_computer,
    input      arrived,
    input      gas_tank_empty,
    output reg keep_driving  ); //

    always @(*) begin
        if (cpu_overheated)
           shut_off_computer = 1;
        else shut_off_computer = 0;
    end

    always @(*) begin
        if (~arrived)
           keep_driving = ~gas_tank_empty;
        else keep_driving = 0;
    end

endmodule

-----------------------------------------------------

*Always case*
-----------------------------------------------------
module top_module ( 
    input [2:0] sel, 
    input [3:0] data0,
    input [3:0] data1,
    input [3:0] data2,
    input [3:0] data3,
    input [3:0] data4,
    input [3:0] data5,
    output reg [3:0] out   );//

    always@(*) begin  // This is a combinational circuit
        case(sel)
            3'b000: out = data0;
            3'b001: out = data1;
            3'b010: out = data2;
            3'b011: out = data3;
            3'b100: out = data4;
            3'b101: out = data5;   
            default: out = 0;
        endcase
    end

endmodule

-----------------------------------------------------

*Always case2*
-----------------------------------------------------
module top_module (
    input [3:0] in,
    output reg [1:0] pos  );
    
    
    always @ (*)
        begin
            casex (in)
                4'bxxx1: pos = 2'b00;
                4'bxx10: pos = 2'b01;
                4'bx100: pos = 2'b10;
                4'b1000: pos = 2'b11;            
            	default: pos = 2'b00;
            endcase
        end
	 
    /*
    always @ (*)
        begin
            case (in)
                4'h0: pos = 2'b00;	//0000
                4'h1: pos = 2'b00;	//0001
                4'h2: pos = 2'b01;	//0010
                4'h3: pos = 2'b00; 	//0011
                4'h4: pos = 2'b10;	//0100
                4'h5: pos = 2'b00;	//0101
                4'h6: pos = 2'b01;	//0110
                4'h7: pos = 2'b00;  //0111          
                4'h8: pos = 2'b11;	//1000
                4'h9: pos = 2'b00;	//1001
                4'ha: pos = 2'b01;	//1010
                4'hb: pos = 2'b00; 	//1011
                4'hc: pos = 2'b10;	//1100
                4'hd: pos = 2'b00;	//1101
                4'he: pos = 2'b01;	//1110
                4'hf: pos = 2'b00; 	//1111
                default: pos = 2'b00;
            endcase
        end    
      */
endmodule

-----------------------------------------------------

*Always casez*
-----------------------------------------------------
module top_module (
    input [7:0] in,
    output reg [2:0] pos );
    
    always @ (*)
        begin
            casez (in)
                8'bzzzz_zzz1: pos = 0;
                8'bzzzz_zz10: pos = 1;
                8'bzzzz_z100: pos = 2;
                8'bzzzz_1000: pos = 3;            
                8'bzzz1_0000: pos = 4;
                8'bzz10_0000: pos = 5;
                8'bz100_0000: pos = 6;
                8'b1000_0000: pos = 7;  
                default: pos = 0;
            endcase
        end

endmodule

-----------------------------------------------------

*Always nolatches*
-----------------------------------------------------
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
    
    always @(*)
        begin
            left = 0;
            down = 0;
            right = 0;
            up = 0;
            case (scancode)
            	16'he06b: left = 1;
            	16'he072: down = 1;
                16'he074: right = 1;
                16'he075: up = 1;   
                default:
                    begin
                        left = 0;
                        down = 0;
                        right = 0;
                        up = 0;  
                    end
            endcase
        end
        
endmodule


