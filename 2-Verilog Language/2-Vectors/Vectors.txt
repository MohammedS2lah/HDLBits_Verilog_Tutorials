*Vectors*
*Vector0*
-------------------------------------------
module top_module ( 
    input wire [2:0] vec,
    output wire [2:0] outv,
    output wire o2,
    output wire o1,
    output wire o0  ); // Module body starts after module declaration
    
    //First Solution
    assign {o2, o1, o0} = vec;
    assign outv = vec;
    
    //Second Solution
    /*
    assign o0 = vec[0];
    assign o1 = vec[1];
    assign o2 = vec[2];
    
    assign outv = vec;
	*/
    
endmodule

-------------------------------------------
*Vectors in more detail*
*Vector1*
-------------------------------------------
`default_nettype none     // Disable implicit nets. Reduces some types of bugs.
module top_module( 
    input wire [15:0] in,
    output wire [7:0] out_hi,
    output wire [7:0] out_lo );
    
    //First Solution
    assign {out_hi, out_lo} = in;
    
    //Second Solution
    /*
    assign out_hi = in[15:8];
    assign out_lo = in[7:0];
	*/

endmodule

-------------------------------------------
*Vector part select*
*Vector2*
-------------------------------------------
module top_module( 
    input [31:0] in,
    output [31:0] out );//

    //First Solution
    assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};
    
    //Second Solution
    /*
    assign out[31:24] = in[7:0];
    assign out[23:16] = in[15:8];
    assign out[15:8]  = in[23:16];
    assign out[7:0]   = in[31:24];
    */

endmodule

-------------------------------------------
*Bitwise operators*
*Vectorgates*
-------------------------------------------
module top_module( 
    input [2:0] a,
    input [2:0] b,
    output [2:0] out_or_bitwise,
    output out_or_logical,
    output [5:0] out_not
);
    
    assign out_or_bitwise = a|b;
    
    assign out_or_logical = a||b;
    
    assign out_not = {~b, ~a};

endmodule

-------------------------------------------
*Four-input gates*
*Gates4*
-------------------------------------------
module top_module( 
    input [3:0] in,
    output out_and,
    output out_or,
    output out_xor
);

    //First Solution
    assign out_and = &in;
    
    assign out_or = |in;
    
    assign out_xor = ^in;
    
    //Second Solution
    /*
    assign out_and = in[0] & in[1] & in[2] & in[3];
    
    assign out_or = in[0] | in[1] | in[2] | in[3];
    
    assign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];
    */
    
endmodule

-------------------------------------------
*Vector Concatenation operator*
*Vector3*
-------------------------------------------
module top_module (
    input [4:0] a, b, c, d, e, f,
    output [7:0] w, x, y, z );

    assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};

endmodule

-------------------------------------------
*Vector reversal 1*
*Vectorr*
-------------------------------------------
module top_module( 
    input [7:0] in,
    output [7:0] out
);
    
    assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};
    
    //Another Solution
    //assign {out[0], out[1], out[2], out[3], out[4], out[5], out[6], out[7]} = in;

endmodule

-------------------------------------------
*Replication operator*
*Vector4*
-------------------------------------------
module top_module (
    input [7:0] in,
    output [31:0] out );//

    assign out = { {24{in[7]}} , in};

endmodule

-------------------------------------------
*More replication*
*Vector5*
-------------------------------------------
module top_module (
    input a, b, c, d, e,
    output [24:0] out );//

    // The output is XNOR of two vectors created by 
    // concatenating and replicating the five inputs.
    //First solution
    assign out = ~{{ {5{a,b,c,d,e}} } ^ { {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} }};
    
    //Second Solution
    /*
    wire [24:0] First_in, Second_in;
    assign First_in = {5{a,b,c,d,e}};
    assign Second_in = { {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} };
    assign out = ~(First_in ^ Second_in);
    */

endmodule

