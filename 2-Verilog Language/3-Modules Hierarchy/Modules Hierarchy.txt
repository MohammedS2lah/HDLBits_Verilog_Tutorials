*Module*
-----------------------------------------------------
module top_module ( input a, input b, output out );
    //By position
    //mod_a inst ( a, b, out );
    
    //By name
    mod_a inst ( .in1(a), .in2(b), .out(out) );
endmodule


-----------------------------------------------------

*Module pos*
-----------------------------------------------------
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    //By position
    mod_a inst ( out1, out2, a, b, c, d );
endmodule

-----------------------------------------------------

*Module name*
-----------------------------------------------------
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    //By name
    mod_a inst ( .in1(a), .in2(b), .in3(c), .in4(d), .out1(out1), .out2(out2) );
endmodule

-----------------------------------------------------

*Module shift*
-----------------------------------------------------
module top_module ( input clk, input d, output q );
	
    wire q1, q2;
    
    my_dff ff1 ( .clk(clk), .d(d), .q(q1) );
    
    my_dff ff2 ( .clk(clk), .d(q1), .q(q2) );    
    
    my_dff ff3 ( .clk(clk), .d(q2), .q(q) );  
    
endmodule

-----------------------------------------------------

*Module shift8*
-----------------------------------------------------
module top_module ( 
    input clk, 
    input [7:0] d, 
    input [1:0] sel, 
    output [7:0] q 
);
    wire [7:0] q1, q2, q3;
    
    my_dff8 dff1 ( .clk(clk), .d(d), .q(q1) );
    
    my_dff8 dff2 ( .clk(clk), .d(q1), .q(q2) );
    
    my_dff8 dff3 ( .clk(clk), .d(q2), .q(q3) );
    
    always @(*)
        begin
            case (sel) 
                2'b00: q = d;
                2'b01: q = q1;
                2'b10: q = q2;
                2'b11: q = q3; 
                default: q = d;
            endcase
        end
       
endmodule

-----------------------------------------------------

*Module add*
-----------------------------------------------------
module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire cout;
    
    add16 Lower_Adder ( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .sum(sum[15:0]), .cout(cout) );

    add16 Upper_Adder ( .a(a[31:16]), .b(b[31:16]), .cin(cout), .sum(sum[31:16]) );
    
endmodule

-----------------------------------------------------

*Module fadd*
-----------------------------------------------------
module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);//
    wire cout;
    
    add16 Lower_Adder ( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .sum(sum[15:0]), .cout(cout) );

    add16 Upper_Adder ( .a(a[31:16]), .b(b[31:16]), .cin(cout), .sum(sum[31:16]) );	
endmodule

module add1 ( input a, input b, input cin,  output sum, output cout );
    
    assign sum = a ^ b ^ cin;
    
    assign cout = (a & b) | ( (a ^ b) & cin );
    
    //assign cout = (a & b) | (a & cin) | (b & cin);

endmodule


-----------------------------------------------------

*Module cseladd*
-----------------------------------------------------
module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);

    wire sel;
    
    wire [15:0] sum0, sum1;
    
    add16 Lower_Adder ( .a(a[15:0]), .b(b[15:0]), .cin(1'b0), .cout(sel), .sum(sum[15:0]) );
    
    add16 Upper_Adder0 ( .a(a[31:16]), .b(b[31:16]), .cin(1'b0), .sum(sum0) );
    
    add16 Upper_Adder1 ( .a(a[31:16]), .b(b[31:16]), .cin(1'b1), .sum(sum1) );
    
    always @(*)
        begin
            case (sel) 
                1'b0: sum[31:16] = sum0;
                1'b1: sum[31:16] = sum1;
                default: sum[31:16] = sum0;
            endcase
        end
    
endmodule


-----------------------------------------------------

*Module addsub*
-----------------------------------------------------
module top_module(
    input [31:0] a,
    input [31:0] b,
    input sub,
    output [31:0] sum
);
    
    wire [31:0] XORed_b;
    
    wire cin;
    
    assign XORed_b = b ^ ({32{sub}});
    
    add16 Lower_Adder (	.a(a[15:0]), .b(XORed_b[15:0]), .cin(sub), .cout(cin), .sum(sum[15:0]) );
    
    add16 Upper_Adder (	.a(a[31:16]), .b(XORed_b[31:16]), .cin(cin), .sum(sum[31:16]) );

endmodule


-----------------------------------------------------
